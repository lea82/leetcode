/*
Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. (each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character
DP f[i][j] represents word1[0,i] word2[0,j] edit distance
if word1[i]==word2[j], f[j][j] = f[i-1][j-1]
else:
if change word1[i] to word2[j]: f[j][j] = 1+ f[i-1][j-1]
if add one char after word1[i], f[i][j] = 1+ f[i][j-1]
if delete char word1[i], f[i][j] = 1 + f[i-1][j]
*/
class Solution {
public:
    int minDistance(string word1, string word2) {
        const int m = word1.size(); 
        const int n = word2.size();
        int f[m+1][n+1]; //DP f[i][j] represents word1[0,i] word2[0,j] edit distance
        for (int i = 0; i < m+1; i++)  f[i][0] = i; //base: word2 is empty
        for (int j = 0; j < n+1; j++)  f[0][j] = j; //base: word1 is empty
        for (int i = 1; i < m+1; i++) {
            for (int j = 1; j < n+1; j++) {
                if (word1[i-1]==word2[j-1]) f[i][j] = f[i-1][j-1];
                else {
                    f[i][j] = 1 + min(f[i-1][j-1], min(f[i-1][j],f[i][j-1]));
                }
            }
        }
        return f[m][n];
    }
};
