/*
Given a 2D board containing 'X' and 'O', capture all regions surrounded by 'X'.

A region is captured by flipping all 'O's into 'X's in that surrounded region.

For example,
X X X X
X O O X
X X O X
X O X X
After running your function, the board should be:

X X X X
X X X X
X X X X
X O X X
*/

        //BFS from each 'O' in the boundary, mark all its four directions neighbors (where is also 'O') as "live"
        //Last step is to flip "O" to "X" because there is no way out, and flip "P"(live) to "O", because it has a path out.
        
public:
    void solve(vector<vector<char>> &board) {
        if (board.size()==0) return;
        queue<pair<int,int>> q; 
        int r=board.size(); //number of rows;
        int c=board[0].size(); //number of columns
        // put the dots on the perimeter to the queue
        for (int i=0;i<r;i++){ q.push({i,0});q.push({i,c-1}); }  //push for queue, push_back/emplace_back for vector/list container
        for (int j=1;j<c;j++){ q.push({0,j});q.push({r-1,j}); } //note 1, not duplicate
        
        //BST from the dots on the perimeter whose value is 'O', to see which neighbors are also 'O'
        //mark them with '+', which means that they can go outside, not surrounded
        
        while (!q.empty()){
            pair<int,int> tmp=q.front();
            q.pop();
            int i=tmp.first;
            int j=tmp.second; //member,not function
            
            if ((i<0)||(i>=r)||(j<0)||(j>=c)||(board[i][j]!='O')) continue; //not going to process
            if (board[i][j]=='O') { //alive
                board[i][j]='+';
                //put its 4 neighbors into q, even some non-existing neighbors
                q.push({i+1,j});
                q.push({i-1,j});
                q.push({i,j+1});
                q.push({i,j-1});
            }
        }
        for (int i=0;i<r;i++){
            for(int j=0;j<c;j++){
                if (board[i][j]=='O') board[i][j]='X';
                else if (board[i][j]=='+') board[i][j]='O';
            }
        }
        return;    
    }
};
