/*Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.
*/
/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int sumNumbers(TreeNode *root) {
        int total=0, sum=0; 
        preorder(root,sum,total);
        return total;
        
    }
    void preorder(TreeNode *root, int &sum, int &total){
        if (!root) return;//empty tree
        sum=sum*10+(root->val);
        if (!root->left & !root->right){//leaf
            total+=sum;
            sum/=10; //return to its above level
            return;
        }
        if (root->left) preorder(root->left,sum,total);
        if (root->right) preorder(root->right,sum,total);
        sum/=10;
        
   
