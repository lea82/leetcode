/*
Given an array of integers, every element appears three times except for one. Find that single one.

Note:
Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
*/
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int one =0, two=0, three=0;
        for (int i=0;i<nums.size();i++) {
            two |=(one & nums[i]);
            one ^= nums[i];
            three = ~(one & two);
            one &= three;
            two &=three;
        }
        return one;
    }
};

2) 

class Solution {
public:
    int singleNumber(vector<int>& nums) {
        const int W = sizeof(int) * 8;
        int count[W];
        fill_n(&count[0],W,0);
        const int n = nums.size();
        for (int i = 0; i < n; i++) {
            for (int j=0; j<W; j++) {
                count[j] += (nums[i] >> j & 1);
                count[j] %= 3;
            }
        }
        int res = 0;
        for (int i=0; i<W; i++) {
            res += count[i]<<i;
        }
        return res;
    }
};
