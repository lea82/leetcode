/**Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
class Solution {
public:
    int maxPoints(vector<Point>& points) {
        int n = points.size();
        if (n<3) return n;
        unordered_map<double,int> slope_count;
        int res = 0;
        for (int i=0;i<n-1;i++){
            slope_count.clear();
            int samePoints = 0;
            int local_max = 1;
            for (int j = i+1; j<n; j++){
                double slope;
                if (points[i].x == points[j].x) {
                    slope = std::numeric_limits<double>::infinity();
                    if (points[i].y == points[j].y) {
                        ++samePoints;
                        continue;
                    }
                } else {
                    slope = 1.0 * (points[i].y - points[j].y)/(points[i].x-points[j].x);
                }
                int count = 0;
                if (slope_count.find(slope) != slope_count.end()){
                    count = ++slope_count[slope];
                } else {
                    count = 2;
                    slope_count[slope] =2;
                }
                local_max = max(count, local_max);
            }
            res = max(res, local_max + samePoints);
        }
        return res;
    }
};
