/**
Given a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    TreeNode* sortedListToBST(ListNode* head) {
        int len = 0;
        ListNode* cur = head;
        while (cur) {
            len++;
            cur = cur->next;
        }
        return buildBST(head, 0, len-1);
        
    }
private:
    TreeNode* buildBST(ListNode* &list, int start, int end) {
        if (start > end) return NULL;
        int mid = start + (end-start)/2;
        TreeNode* left = buildBST(list, start, mid-1);
        TreeNode* parent = new TreeNode(list->val);
        parent->left = left;
        list = list->next;
        parent->right = buildBST(list,mid+1, end);
        return parent;
    }
};
