/**
		Given an unsorted array of integers, find the length of the longest consecutive elements sequence.
		For example,
		Given [100, 4, 200, 1, 3, 2],
		The longest consecutive elements sequence is [1, 2, 3, 4]. Return its length: 4.
		Your algorithm should run in O(n) complexity.
*/

/*int longestConsecutive(const vector<int> &num) {
            unordered_map<int, int> hash;
            for (size_t i=0; i<num.size(); ++i) 
                hash[num[i]] = 1;

            int ans=0;
            for (size_t i=0; i<num.size(); ++i) {
                auto it = hash.find(num[i]+1);
                for (int j=num[i]+1; it!=hash.end(); it=hash.find(++j)) {
                    hash[num[i]] += it->second;
                    hash.erase(it);
                }
                ans = max(ans, hash[num[i]]);
            }
            return ans;
        }
*/
        
class Solution {
public:
    int longestConsecutive(vector<int> &num) {
        int n=num.size();
        if (n<2) return n;
        unordered_map<int,int> map;
        unordered_map<int,int>::iterator it;
        
        for (int i=0;i<n;i++){
            map[num[i]]=num[i];
        }
        
        int len=0;
        while (map.size()){
            int start=map.begin()->first;
            int end=map.begin()->second;
            
            while(map.erase(start-1)) start--;
            while(map.erase(end)) end++;
            len=(end-start>len)?(end-start):len;
        }
        return len;
    }
};       
        
