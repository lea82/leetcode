/*
Design a data structure that supports the following two operations:

void addWord(word)
bool search(word)
search(word) can search a literal word or a regular expression string containing only letters a-z or .. A . means it can represent any one letter.

For example:

addWord("bad")
addWord("dad")
addWord("mad")
search("pad") -> false
search("bad") -> true
search(".ad") -> true
search("b..") -> true
*/

class WordDictionary {
    public:
    struct Trie {
     vector<Trie *> child;
     bool isWord;
     Trie() : isWord(false), child(vector<Trie *>(26, nullptr)) {}
    };
 Trie *root;
 //WordDictionary() : root(new Trie()) {}
 WordDictionary (){
     root = new Trie();
 }
void addWord(string word) {
    const int size_w = word.size();
    Trie *cur = root;
    for (int i = 0; i < size_w; i++) {
        int index = word[i] - 'a';
        if (!cur->child[index]) cur->child[index] = new Trie();
        cur = cur->child[index];
    }
    cur->isWord = true;
}

bool search(string word) {
    return search(word.c_str(), root);
}
bool search(const char *key, Trie *cur) {
    if (!cur) return false;
    if (*key == '\0') return cur->isWord;
    if (*key == '.') {
        for (int i = 0; i < 26; i++) {
            if (cur->child[i]) 
                if (search(key+1, cur->child[i])) return true;
        }
    } else
       return search(key+1, cur->child[*key - 'a']);
}
};
