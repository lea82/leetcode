/*
Given two numbers represented as strings, return multiplication of the numbers as a string.

Note: The numbers can be arbitrarily large and are non-negative
*/
class Solution {
public:
    string multiply(string num1, string num2) {
        int m = num1.size(), n = num2.size();
        string sum(m+n, '0');

        for (int i=m-1;i>=0;i--){
            int carry = 0; //
            for (int j= n-1;j>=0;j--){
                size_t tmp = (sum[i+j+1]-'0') + (num1[i]-'0')*(num2[j]-'0') + carry; //size_t It is a type able to represent the size of any object in bytes: size_t is the type returned by the sizeof operator and is widely used in the standard library to represent sizes and counts.
                sum[i+j+1] = tmp % 10+'0';
                carry = tmp /10;
            }
           sum[i]+= carry;  
        }
        size_t startpos = sum.find_first_not_of('0');
        if (startpos != string::npos) return sum.substr(startpos);
        return "0";
    }
};
