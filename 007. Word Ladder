/* 
Given two words (start and end), and a dictionary, find the length of shortest transformation sequence from start to end, such that:

Only one letter can be changed at a time
Each intermediate word must exist in the dictionary
For example,

Given:
start = "hit"
end = "cog"
dict = ["hot","dot","dog","lot","log"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
*/

    int ladderLength(string start, string end, unordered_set<string> &dict) {
    	queue<pair<string, int> > queWords;
		queWords.push({start, 1});
		while(!queWords.empty()) {
			pair<string, int> word = queWords.front();
            queWords.pop();
			if(word.first == end)
				return word.second;
			else {
				string w = word.first;
				for(int i=0; i<w.size(); ++i) {
					char ch = w[i];

					for(char c='a'; c<='z'; ++c) {
						w[i] = c;
						if(dict.find(w)!=dict.end() || w==end) {
							dict.erase(w);
							queWords.push({w, word.second+1});
						}
					}
					w[i] = ch;
				}
			}
		}
		return 0;
    }
};
