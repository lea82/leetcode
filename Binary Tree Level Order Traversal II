/**
Given a binary tree, return the bottom-up level order traversal of its nodes' values. (ie, from left to right, level by level from leaf to root).

For example:
Given binary tree {3,9,20,#,#,15,7},
    3
   / \
  9  20
    /  \
   15   7
return its bottom-up level order traversal as:
[
  [15,7],
  [9,20],
  [3]
]
*/

class Solution {
    vector<vector<int>> result;
    void DFS(TreeNode * root, int depth){
        if (!root) return;
        if (result.size()== depth)result.push_back(vector<int>()); //start a new level
        result[depth].push_back(root->val);
        DFS(root->left, depth+1);
        DFS(root->right,depth+1);
    }
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) {
        DFS(root,0);
        return vector<vector<int>> (result.rbegin(),result.rend());
    }
};
