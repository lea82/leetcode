/*
Given a matrix of m x n elements (m rows, n columns), return all elements of the matrix in spiral order.

For example,
Given the following matrix:

[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
You should return [1,2,3,6,9,8,7,4,5].
*/
class Solution {
public:
    vector<int> spiralOrder(vector<vector<int>>& matrix) {
        vector<int> res;
        if (matrix.empty()) return res;
        int startX=0,startY=0; //begining of column and row
        int endX=matrix[0].size()-1, endY=matrix.size()-1;
        while (true){
            //from left to right
            for (int j=startX; j<=endX; j++) res.push_back(matrix[startY][j]);
            if (++startY >endY) break;
            //from top to bottom
            for (int i=startY; i<=endY; i++) res.push_back(matrix[i][endX]);
            if (--endX < startX) break;
            //from right to left
            for (int j=endX; j>=startX; j--) res.push_back(matrix[endY][j]);
            if (--endY < startY) break;
            //from bottom to top
            for (int i = endY; i>=startY; i--) res.push_back(matrix[i][startX]);
            if (++startX > endX) break;
        }
        return res;
    }
};
