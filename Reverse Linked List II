/*
Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.

Note:
Given m, n satisfy the following condition:
1 ≤ m ≤ n ≤ length of list.
*/
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int m, int n) {
        ListNode dummy(-1);
        dummy.next = head;
        head = &dummy;
        for (int i=1;i<m;i++) { //advance to the one before mNode 
            if (!head) return dummy.next;
            head = head->next;
        }
        ListNode *preM = head;
        ListNode *mNode = head->next;
        ListNode *nNode = mNode;
        ListNode *postN = nNode->next;
        for (int i = m; i<n; i++) {
            ListNode *tmp = postN->next;
            postN->next = nNode;
            nNode = postN;
            postN = tmp;
        }
        preM->next = nNode;
        mNode->next = postN;
        return dummy.next;
    }
};
