Write an algorithm to determine if a number is "happy".

A happy number is a number defined by the following process: Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1. Those numbers for which this process ends in 1 are happy numbers.

Example: 19 is a happy number

12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

class Solution {
private:
    int digitsquare(int n){
        int sum = 0;
        while(n){
            int tmp = n % 10;
            sum += tmp * tmp;
            n /=10;
        }
        return sum; //don't forget return value
    }
public:
    bool isHappy(int n) {
        int  slow=n, fast=n;
        do{
            slow = digitsquare(slow);
            fast = digitsquare(fast);
            fast = digitsquare(fast);
        } while(slow != fast);
        if (slow == 1) return true;
        else return false;
    }
};

2)
    /*
    The common choice is to use map or set to check if there is a loop. since the maximum sum is no greater than 2x2 + 9x9x9 (2,999,999,999), we can use a 1000 lengh hashtable . It's not O(1) space but it's faster than the fast-slow pointer solution.
    */
    int tran(int n){
        int ans = 0;
        while(n){
            ans += pow(n%10, 2);
            n/=10;
        }
        return ans;
    }
    public:
    bool isHappy(int n) {
        bool rep[1000];
        memset(rep, 0, sizeof(rep));
        n = tran(n);
        while(!rep[n]){
            rep[n] = true;
            if(n == 1)
                return true;   
            n = tran(n);
        }
        return false;
    }
};

3)
 //Using fact all numbers in [2, 6] are not happy (and all not happy numbers end on a cycle that hits this interval):

bool isHappy(int n) {
    while(n>6){
        int next = 0;
        while(n){next+=(n%10)*(n%10); n/=10;}
        n = next;
    }
    return n==1;
}
