/* Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note:
Elements in a triplet (a,b,c) must be in non-descending order. (ie, a ≤ b ≤ c)
The solution set must not contain duplicate triplets.
    For example, given array S = {-1 0 1 2 -1 -4},

    A solution set is:
    (-1, 0, 1)
    (-1, -1, 2)
*/

class Solution {
public:
    vector<vector<int> > threeSum(vector<int> &num) {
        // IMPORTANT: Please reset any member data you declared, as
        // the same Solution instance will be reused for each test case.
        std::sort(num.begin(),num.end()); //non-decreasing order
        
        vector<vector<int>> result;
        int len = num.size();
        for (int i=0; i< len; i++)
        {
            int target = 0 - num[i]; //a+b=-c, -c here is target num[i] for 2 sum 
            int start = i+1, end = len - 1; //a=num[start],b=num[end]
            while (start < end)
            {
                if (num[start] + num[end] == target)
                { 
                    vector<int> solution;
                    solution.push_back(num[i]);
                    solution.push_back(num[start]);
                    solution.push_back(num[end]);
                    result.push_back(solution);
                    start++;
                    end--;
                    while ((start<end)&&(num[start]==num[start-1])) start++; //skip duplicate num[start]
                    while ((start<end)&&(num[end]==num[end+1])) end--; //skip duplicate num[end]
                
                }
                else if (num[start]+num[end]<target) 
                {
                    start++;
                }
                else {
                    end --;
                }
                
            }
            if (i<len-1)
            {
                while(num[i]==num[i+1]) i++; //skip duplicate target
            }
        }
        return result;
    }
};
