class Solution {
public:
    bool isValid(string s) {
        // Start typing your C/C++ solution below
        // DO NOT write int main() function
        if (s.size()==0) return true;
        vector <char> stack1;
        stack1.push_back(s[0]);
        for (int i=1; i<s.size(); i++)
        {
            if (s[i]=='(' || s[i]=='[' || s[i]=='{')
            {
                stack1.push_back(s[i]);
                continue;
            }
            char current=stack1.back();
            if (s[i]==')' && current!='(') return false;
            if (s[i]==']' && current!='[') return false;
            if (s[i]=='}' && current!='{' ) return false;
            stack1.pop_back();
        }
        if (stack1.size()!=0) return false;
        return true;
    }
};

2) bool isValid(string s) {
        stack <char> stk;
        char temp = 0;
        unordered_map <char, char> bran_dict;
        bran_dict[')'] = '(';
        bran_dict[']'] = '[';
        bran_dict['}'] = '{';
        for (int i=0; i<s.size(); i++) {
            temp = s[i];
            if (temp == ')' || temp == '}' || temp == ']') {
                if (stk.empty() || stk.top() != bran_dict[temp])
                    return false;
                else {
                    stk.pop();
                }
            }
            else
                stk.push(temp);
        }
        if (stk.empty())
            return true;
        else
            return false;
    }
    
    3)  bool isValid(string s) {
        string left = "([{";
        string right = ")]}";
        stack<char> stk;
        for (int i=0;i<s.size();i++){
            if (left.find(s[i])!=left.npos){
                stk.push(s[i]);
            }else {
                if (stk.empty()||left[right.find(s[i])]!=stk.top()) return false;
                else stk.pop();
            }
        }
        return stk.empty();
    }
