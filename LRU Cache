
/*
Design and implement a data structure for Least Recently Used (LRU) cache. It should support the following operations: get and set.

get(key) - Get the value (will always be positive) of the key if the key exists in the cache, otherwise return -1.
set(key, value) - Set or insert the value if the key is not already present. When the cache reached its capacity, it should invalidate the least recently used item before inserting a new item.

*/
class LRUCache{
private:
    struct CacheNode {
        int key;
        int value;
        CacheNode(int k, int v): key(k), value(v){}
    };

    list<CacheNode> CacheList;
    unordered_map<int,list<CacheNode>::iterator> CacheMap;
    int capacity;
public:
    LRUCache(int capacity) {
        this->capacity = capacity;
    }
    
    int get(int key) {
        if (CacheMap.find(key) == CacheMap.end()) return -1;
            //found it
        CacheList.splice(CacheList.begin(),CacheList,CacheMap[key]); //remove its position from CacheList and insert it at CacheList.begin()
        CacheMap[key] = CacheList.begin(); //update
        return CacheMap[key]->value;
    }
    
    void set(int key, int value) {
        if (CacheMap.find(key) == CacheMap.end()) {//not found it, new node
            if (CacheList.size() == capacity) {//reached capacity, remove one from end and update it to begin
                CacheMap.erase(CacheList.back().key);
                CacheList.pop_back(); //remove from end of list
            } 
            //insert
            CacheList.push_front(CacheNode(key,value));
            CacheMap[key] = CacheList.begin();
        } else { //found it, need update
                CacheMap[key]->value = value;
                CacheList.splice(CacheList.begin(),CacheList,CacheMap[key]);
                CacheMap[key] = CacheList.begin();
            }
    }
};
