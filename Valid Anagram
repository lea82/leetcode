/*
Given two strings s and t, write a function to determine if t is an anagram of s.

For example,
s = "anagram", t = "nagaram", return true.
s = "rat", t = "car", return false.

Note:
You may assume the string contains only lowercase alphabets.
*/

//method 1
/*
This idea uses a hash table to record the times of appearances of each letter in the two strings s and t. 
For each letter in s, it increases the counter by 1 while for each letter in t, it decreases the counter by 1. 
Finally, all the counters will be 0 if they two are anagrams of each other.

The first implementation uses the built-in unordered_map and takes 36 ms.
*/

class Solution {
public:
    bool isAnagram(string s, string t) {
        //hash table to record the number of apparences of each alphabet in the string
        if (s.size() != t.size()) return false;
        int n = s.size();
        unordered_map<char, int> counts;
        for (int i = 0; i<n; i++){
            counts[s[i]]++;
            counts[t[i]]--;
        }
        for (auto count: counts){
            if (count.second) return false; //if is not zero, return false
        }
        return true;
    }
};

//method 2:
Since the problem statement says that "the string contains only lowercase alphabets", 
we can simply use an array to simulate the unordered_map and speed up the code. The following implementation takes 12 ms.

 bool isAnagram(string s, string t) {
        if (s.length() != t.length()) return false;
        int n = s.length();
        int counts[26] = {0};
        for (int i = 0; i < n; i++) { 
            counts[s[i] - 'a']++;
            counts[t[i] - 'a']--;
        }
        for (int i = 0; i < 26; i++)
            if (counts[i]) return false;
        return true;
    }
