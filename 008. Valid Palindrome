/**
		Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

		For example,
		"A man, a plan, a canal: Panama" is a palindrome.
		"race a car" is not a palindrome.

		Note:
		Have you consider that the string might be empty? This is a good question to ask during an interview.

		For the purpose of this problem, we define empty string as valid palindrome.Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.

		For example,
		"A man, a plan, a canal: Panama" is a palindrome.
		"race a car" is not a palindrome.

		Note:
		Have you consider that the string might be empty? This is a good question to ask during an interview.

		For the purpose of this problem, we define empty string as valid palindrome.
*/

class Solution {
public:
    bool isPalindrome(string s) {
        if (s.size()<2) return true;
        int start=0;// two pointers for comparison
        int end=s.size()-1;
        std::transform(s.begin(),s.end(),s.begin(),::tolower); //ignore cases

        while(start<end){
        /*
        if(!(s[i]>='a'&&s[i]<='z' || s[i]>='A'&&s[i]<='Z' || s[i]>='0'&&s[i]<='9'))
				++i;
			  else if(!(s[j]>='a'&&s[j]<='z' || s[j]>='A'&&s[j]<='Z' || s[j]>='0'&&s[j]<='9'))
			 	--j;
			  else if(tolower(s[i]) == tolower(s[j]))
				++i, --j;
			  */
            while((start<end) && !isalnum(s[start])) start++; //consider only alphanumeric characters
            while((start<end) && !isalnum(s[end])) end--;
            if (s[start]!=s[end]) return false;
            start++; //update 
            end--;
        }
        return true;
    }
};

     
