//how many words apart in the array of words
Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.

For example,
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].

Given word1 = "coding", word2 = "practice", return 3.
Given word1 = "makes", word2 = "coding", return 1.

Note:
You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.

1) 
1 class Solution {
 2 public:
 3     int shortestDistance(vector<string>& words, string word1, string word2) {
 4         int n = words.size(), idx1 = -1, idx2 = -1, dist = INT_MAX;
 5         for (int i = 0; i < n; i++) {
 6             if (words[i] == word1) idx1 = i;
 7             else if (words[i] == word2) idx2 = i;
 8             if (idx1 != -1 && idx2 != -1)
 9                 dist = min(dist, abs(idx1 - idx2));
10         }
11         return dist;
12     }
13 };

2) 
class Solution {
public:
    int shortestDistance(vector<string>& words, string word1, string word2) {
        int pos1 = -1, pos2 = -1, res = words.size();
        for (auto it = words.begin(); it != words.end(); ++it){
            if ((*it).compare(word1) == 0) pos1 = it - words.begin();
            else if ((*it).compare(word2) == 0) pos2 = it - words.begin();
            else continue;
            //if neither equals to word1 and 2, loop is continued and last step skipped
            if (pos1 >= 0 && pos2 >= 0 && abs(pos1 - pos2) < res) res = abs(pos1 - pos2); 
        }
        return res;
    }
};
