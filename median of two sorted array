/*
There are two sorted arrays nums1 and nums2 of size m and n respectively. 
Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).
*/


class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
        int m = nums1.size();
        int n = nums2.size();
        int k = m + n;
        if (k % 2 == 0) { //even number of elements in total, have to put this first
            return (find_kth(nums1.begin(), m, nums2.begin(), n, k/2) + find_kth(nums1.begin(), m, nums2.begin(), n, k/2 + 1))/2.0;
            
        } else { //odd
            return find_kth(nums1.begin(), m, nums2.begin(), n, k/2 + 1);
        }
        
    }
private:
    int find_kth(vector<int>::const_iterator nums1, int m, vector<int>::const_iterator nums2, int n, int k){
        
        if (m > n) return find_kth(nums2, n, nums1, m, k); 
        //assume m<=n

        if (m == 0) return *(nums2 + k - 1);
        if (k == 1) return min(*nums1, *nums2);
        //divide k into 2 parts
        int ia = min(m, k/2);
        int ib = k - ia;
        if (* (nums1+ia-1) == *(nums2+ib-1)) return *(nums1+ia-1);
        else if (*(nums1+ia-1) < *(nums2+ib-1)) return find_kth(nums1 + ia, m - ia, nums2, n, k - ia);
        else return find_kth(nums1, m, nums2 + ib, n - ib, k - ib);
    }
};
