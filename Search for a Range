/*
Given a sorted array of integers, find the starting and ending position of a given target value.

Your algorithm's runtime complexity must be in the order of O(log n).

If the target is not found in the array, return [-1, -1].

For example,
Given [5, 7, 7, 8, 8, 10] and target value 8,
return [3, 4].

Show Tags
*/
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
       int i = 0, j = nums.size()-1;
        
        vector<int> res(2, -1);
        while (i < j){ //search for the left one
            int mid = i + (j-i)/2; 
            if (nums[mid] < target) i = mid + 1;
            else j = mid;
        }
        if (nums[i] != target) return res;
        else res[0] = i;
        j = nums.size()-1;
        while (i < j){ //no need to reset i, search for the right one
            int mid = (i+j+1)/2; //biased to the right
            if (nums[mid] > target) j = mid -1;
            else i = mid; //as mid is biased to the right, so that the loop will not stuck
        }
        //if (nums[mid] != target) return res;
        res[1] = j;
        return res;
    }
};
