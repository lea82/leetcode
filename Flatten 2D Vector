ã€€Implement an iterator to flatten a 2d vector.

For example,
Given 2d vector =

[
  [1,2],
  [3],
  [4,5,6]
]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 2, 3, 4, 5, 6].

The idea is very simple. We keep two variables row and col for the range of rows and cols. Specifically, row is the number of rows of vec2d and col is the number of columns of the current 1d vector in vec2d. We also keep two variables r and c to point to the current element.

In the constructor, we initialize row and col as above and initialize both r and c to be 0(pointing to the first element).

In hasNext(), we just need to check whether r and c are still in the range limited by row andcol.

In next(), we first record the current element, which is returned later. Then we update the running indexes and possibly the range if the current element is the last element of the current 1d vector.

A final and important note, since in next(), we record the current element, we need to guarantee that there is an element. So we implement a helper function skipEmptyVector() to skip the empty vectors. It is also important to handle the case that vec2d is empty (in this case, we set col = -1).

The time complexity of hasNext() is obviously O(1) and the time complexity of next is alsoO(1) in an amortized sense.
Since we need to copy the vec2d anyway, we can just copy it into a simple vector<int>, which makes life much easier :-)

1 class Vector2D {
 2 public:
 3     Vector2D(vector<vector<int>>& vec2d) {
 4         int row = vec2d.size();
 5         for (int r = 0; r < row; r++) {
 6             int col = vec2d[r].size();
 7             for (int c = 0; c < col; c++)
 8                 data.push_back(vec2d[r][c]);
 9         }
10         idx = 0;
11     }
12 
13     int next() {
14         return data[idx++];
15     }
16 
17     bool hasNext() {
18         return idx < data.size();
19     }
20 private:
21     vector<int> data;
22     int idx;
23 };
24 
25 /**
26  * Your Vector2D object will be instantiated and called as such:
27  * Vector2D i(vec2d);
28  * while (i.hasNext()) cout << i.next();
29  */
Of course, since elements in vector are stored in a contiguous range of memory, the problem can be solved in O(1) memory (see here for a better solution). 

2) **** this is better!!!
Since the OJ does while (i.hasNext()) cout << i.next();, i.e., always calls hasNext before next, 
I don't really have to call it myself so I could save that line in next. 
But I think that would be bad, we shouldn't rely on that.

class Vector2D {
    vector<vector<int>>::iterator i, iEnd;
    int j = 0;
public:
    Vector2D(vector<vector<int>>& vec2d) {
        i = vec2d.begin();
        iEnd = vec2d.end();
    }

    int next() {
        hasNext(); //could be saved. but better not rely on OJ, while (i.hasNext()) cout << i.next();
        return (*i)[j++];
    }

    bool hasNext() {
        while (i != iEnd && j == (*i).size())
            i++, j = 0;
        return i != iEnd;
    }
};
