/**
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? 
How would you optimize the kthSmallest routine?
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */

//recursive

class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        return find(root,k);
    }
    int find(TreeNode* root, int &k){
        if (root){
            int x = find(root->left,k);
            return !k?x:!--k?root->val:find(root->right,k);
        }
    }
};

//iterative

 int kthSmallest(TreeNode* root, int k) {
        stack<TreeNode *> stk;
        TreeNode *p = root;
        while(p || !stk.empty())
        {
            while(p) //push all left till left to the stack
            {
                stk.push(p);
                p = p->left;
            }
            p = st.top(); //first top is the smallest
            if(--k == 0)
                return p->val;
            st.pop();
            p = p->right;
        }
    }
