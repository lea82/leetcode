/*
Given an array of integers and an integer k, find out whether there there are two distinct indices i and j in the array such that nums[i] = nums[j] and the difference between i and j is at most k.
*/
/*
The basic idea is to maintain a set s which contain unique values from nums[i - k] to nums[i - 1], 
if nums[i] is in set s then return true else update the set.
*/
class Solution {
public:
    bool containsNearbyDuplicate(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_set<int> s;
        if (k<=0) return false;
        if (k>=n) k=n-1;
        for (int i=0;i<n;i++){
           if (i>k) s.erase(nums[i-k-1]); //maintain a set from i-1 to i-k
           if (s.find(nums[i])!=s.end()) return true;
           s.insert(nums[i]);
        }
        return false;
    }
};

2) 
/*
straightforward. 
We maintain a mapping mp from a value in nums to its position (index) i. 
Each time we meet an unseen value, we add it to the map (mp[nums[i]] = i). 
Otherwise, depending on whether the recorded index mp[nums[i]] and the current index i satisfy i - mp[nums[i]] <= k 
(node that the new index i is larger than the old index mp[nums[i]]), 
we return true or update the index (mp[nums[i]] = i). 
If all the elements have been visited and we have not returned true, we will return false.
*/

  bool containsNearbyDuplicate(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int,int> mp;
        for (int i = 0; i<n; i++){
            if (mp.find(nums[i])!=mp.end() && (i - mp[nums[i]]<=k)) return true;
            mp[nums[i]]=i;
        }
        return false;
    }
