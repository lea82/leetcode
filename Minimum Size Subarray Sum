/*
Given an array of n positive integers and a positive integer s, find the minimal length of a subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint.

click to show more practice.

More practice:
If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n).
*/

class Solution {
public:
    int minSubArrayLen(int s, vector<int>& nums) {
        int pos = 0;
        int sum = 0, minlen = INT_MAX;
        for (int i=0; i<nums.size(); i++){
            sum += nums[i];
            
                while (sum >=s) {
                    
                    minlen = min(minlen, i-pos+1);
                  
                    sum -= nums[pos++];
                }
            
        }
        return (minlen == INT_MAX)?0:minlen;
    }
};
